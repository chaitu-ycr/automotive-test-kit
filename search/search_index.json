{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"automotive-test-kit","text":"<p>Version: 25.0.0 Author: chaitu-ycr License: MIT Python Compatibility: 3.10 \u2013 3.13</p>"},{"location":"#description","title":"Description","text":"<p><code>automotive-test-kit</code> is a monorepo that includes various automotive test automation packages and a knowledge base. It is designed to streamline and centralize automotive testing, automation, and documentation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Aggregates multiple automotive test automation packages.</li> <li>Provides a unified interface for various tools and utilities.</li> <li>Includes a knowledge base for development, integration, process, programming, and testing topics.</li> </ul>"},{"location":"#included-packages","title":"Included Packages","text":"<ul> <li><code>can_log_analyzer</code></li> <li><code>canmatrix_webapp</code></li> <li><code>crypto_lab</code></li> <li><code>hid_usb_relay</code></li> <li><code>kmtronic_usb_relay</code></li> <li><code>py_clocks</code></li> <li><code>py_uds_demo</code></li> <li><code>py_uds_lib</code></li> <li><code>tenma_ps</code></li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>To run the main entry point:</p> <pre><code>python -m src.automotive_test_kit.main\n</code></pre> <p>This will print:</p> <pre><code>Hello from automotive-test-kit!\n</code></pre>"},{"location":"packages/can_log_analyzer/","title":"CAN Log Analyzer","text":"<p>A web-based tool for analyzing CAN log files using Streamlit, Plotly, and cantools.</p>"},{"location":"packages/can_log_analyzer/#features","title":"Features","text":"<ul> <li>Upload and parse CAN log files (<code>.asc</code>, <code>.blf</code>)</li> <li>Load CAN database files (<code>.dbc</code>)</li> <li>Visualize and plot selected CAN signals interactively</li> <li>User-friendly web interface with sidebar controls</li> <li>Interactive signal selection and customizable plots (scatter, line, heatmap)</li> <li>Grid and axis customization for detailed analysis</li> </ul>"},{"location":"packages/can_log_analyzer/#notes","title":"Notes","text":"<ul> <li>Ensure you are using Python 3.9\u20133.13 as specified in the project requirements.</li> <li>Only <code>.dbc</code> files are supported for CAN database input.</li> </ul>"},{"location":"packages/can_log_analyzer/#usage-web-app","title":"Usage - Web App","text":"<p>To start the web application, run:</p> <pre><code>python -m can_log_analyzer.run_web_app\n</code></pre> <ul> <li>The app will launch in your default web browser at <code>http://localhost:8501</code> (unless otherwise configured).</li> <li>Use the sidebar to upload your CAN log files (<code>.asc</code>, <code>.blf</code>) and CAN database files (<code>.dbc</code>).</li> <li>Select channels, messages, and signals to visualize.</li> <li>Choose plot type and customize grid/axis options as needed.</li> <li>Interactive plots and analysis will be available after loading your files.</li> </ul>"},{"location":"packages/can_log_analyzer/#source-manual","title":"source manual","text":""},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp","title":"<code>WebApp</code>","text":"<p>Streamlit CAN Log Analyzer Web Application.</p> <p>Provides a Streamlit-based web interface for uploading, parsing, and visualizing CAN log files and databases. Supports DBC and ARXML database formats, ASC and BLF log formats, and interactive signal plotting using Plotly.</p> Features <ul> <li>Upload and parse CAN log and database files.</li> <li>Select channels, messages, and signals for plotting.</li> <li>Visualize signals as scatter, line, or heatmap plots.</li> </ul>"},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp.load_database","title":"<code>load_database(file)</code>  <code>staticmethod</code>","text":"<p>Load a CAN database file (.dbc) using cantools.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Any</code> <p>Uploaded file object from Streamlit.</p> required <p>Returns:</p> Type Description <code>Optional[Database]</code> <p>Optional[cantools.database.Database]: Parsed CAN database object, or None on failure.</p>"},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp.load_log","title":"<code>load_log(log_bytes, ext)</code>  <code>staticmethod</code>","text":"<p>Parse a CAN log file (.asc or .blf) and return structured data.</p> <p>Parameters:</p> Name Type Description Default <code>log_bytes</code> <code>bytes</code> <p>Raw bytes of the uploaded CAN log file.</p> required <code>ext</code> <code>str</code> <p>File extension (should be '.asc' or '.blf').</p> required <p>Returns:</p> Type Description <code>Dict[int, Dict[int, List[dict]]]</code> <p>Dict[int, Dict[int, List[dict]]]: Nested dictionary mapping channel and message ID</p> <code>Dict[int, Dict[int, List[dict]]]</code> <p>to a list of message entries with timestamp and data.</p>"},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp.plot_signals","title":"<code>plot_signals(entries, message, signals, plot_type, plot_mode, show_grid, xaxis_grid_dtick=None)</code>  <code>staticmethod</code>","text":"<p>Plot selected CAN signals using Plotly.</p> <p>Parameters:</p> Name Type Description Default <code>entries</code> <code>List[dict]</code> <p>List of CAN message entries (timestamp and data).</p> required <code>message</code> <code>Message</code> <p>CAN message definition.</p> required <code>signals</code> <code>List[str]</code> <p>List of signal names to plot.</p> required <code>plot_type</code> <code>str</code> <p>Type of plot ('Scatter', 'Line', or 'Heatmap').</p> required <code>plot_mode</code> <code>str</code> <p>Plot mode ('Separate Plots' or 'Single Plot').</p> required <code>show_grid</code> <code>bool</code> <p>Whether to show grid lines on the plot.</p> required <code>xaxis_grid_dtick</code> <code>Optional[float]</code> <p>X-axis grid interval (None for auto).</p> <code>None</code>"},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp.run","title":"<code>run()</code>  <code>classmethod</code>","text":"<p>Main entry point for the Streamlit web app.</p> <p>Handles the UI workflow: file upload, database and log parsing, selection of channels/messages/signals, and plotting.</p>"},{"location":"packages/can_log_analyzer/#can_log_analyzer.web_app.WebApp.upload_files","title":"<code>upload_files()</code>  <code>staticmethod</code>","text":"<p>Display file upload widgets for CAN log and database files in the sidebar.</p> <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Tuple[Optional[Any], Optional[Any]]: The uploaded CAN log file and database file objects,</p> <code>Optional[Any]</code> <p>or None if not provided.</p>"},{"location":"packages/canmatrix_webapp/","title":"canmatrix_webapp","text":"<p>A Streamlit webapp for the canmatrix Python package.</p>"},{"location":"packages/canmatrix_webapp/#features","title":"Features","text":"<ul> <li>Upload CAN matrix files in various formats (DBC, ARXML, KCD, FIBEX, XLS, XLSX, XML)</li> <li>Explore loaded matrices, view ECUs, frames, and signals</li> <li>Export matrices to supported formats</li> </ul>"},{"location":"packages/canmatrix_webapp/#usage","title":"Usage","text":""},{"location":"packages/canmatrix_webapp/#launch-the-web-application","title":"Launch the Web Application","text":"<p>You can start the web application using the provided launcher:</p> <pre><code>python -m canmatrix_webapp.run_web_app\n</code></pre>"},{"location":"packages/canmatrix_webapp/#optional-arguments","title":"Optional Arguments","text":"<ul> <li><code>--server-address ADDRESS</code>   Address to bind the Streamlit server (default: system FQDN)</li> <li><code>--server-port PORT</code>   Port to run the Streamlit server on (default: 8502)</li> </ul> <p>Example:</p> <pre><code>python -m canmatrix_webapp.run_web_app --server-address 127.0.0.1 --server-port 8502\n</code></pre>"},{"location":"packages/canmatrix_webapp/#source-manual","title":"source manual","text":""},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp","title":"<code>WebApp()</code>","text":"<p>Streamlit-based web application for interacting with CAN matrix files using the canmatrix package.</p> Features <ul> <li>Upload CAN matrix files in various formats (DBC, ARXML, KCD, FIBEX, XLS, XLSX, XML).</li> <li>Explore loaded matrices, view ECUs, frames, and signals.</li> <li>Export matrices to supported formats.</li> </ul> <p>Initialize the WebApp instance.</p>"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.display_frames_ui","title":"<code>display_frames_ui(matrix)</code>","text":"<p>UI for selecting and displaying frame details.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>Any</code> <p>The CAN matrix object containing frames.</p> required"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.display_matrix_info","title":"<code>display_matrix_info(matrix)</code>","text":"<p>Display basic information about the selected matrix.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>Any</code> <p>The CAN matrix object to display information for.</p> required"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.explore_matrices_ui","title":"<code>explore_matrices_ui()</code>","text":"<p>UI for exploring loaded matrices and exporting them.</p>"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.export_matrix_to_bytes","title":"<code>export_matrix_to_bytes(matrix, export_format)</code>  <code>staticmethod</code>","text":"<p>Export a CAN matrix to the specified format and return as bytes.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>Any</code> <p>The CAN matrix object to export.</p> required <code>export_format</code> <code>str</code> <p>The export format (e.g., 'dbc', 'arxml', etc.).</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>The exported file content.</p>"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.export_matrix_ui","title":"<code>export_matrix_ui(matrix)</code>","text":"<p>UI for exporting the selected matrix to a chosen format.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>Any</code> <p>The CAN matrix object to export.</p> required"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.load_canmatrix_file","title":"<code>load_canmatrix_file(file_bytes, file_format)</code>  <code>staticmethod</code>","text":"<p>Load a CAN matrix file using canmatrix.formats.load and normalize the result.</p> <p>Parameters:</p> Name Type Description Default <code>file_bytes</code> <code>bytes</code> <p>The file content as bytes.</p> required <code>file_format</code> <code>str</code> <p>The format of the CAN matrix file.</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[Dict[str, Any]], Any]</code> <p>Tuple[Optional[Dict[str, Any]], Any]: Tuple of (matrices dict or None, loaded raw object).</p>"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.load_matrix_ui","title":"<code>load_matrix_ui()</code>","text":"<p>UI for uploading and loading a CAN matrix file.</p>"},{"location":"packages/canmatrix_webapp/#canmatrix_webapp.web_app.WebApp.run","title":"<code>run()</code>","text":"<p>Main entry point for the Streamlit web application.</p>"},{"location":"packages/crypto_lab/","title":"crypto_lab","text":"<p>A Python Streamlit-based web application for experimenting with cryptographic algorithms and protocols using PyCryptodome.</p>"},{"location":"packages/crypto_lab/#features","title":"Features","text":"<ul> <li>Interactive web UI for cryptographic demos, including:</li> <li>SHA-256 hashing</li> <li>Random number generation</li> <li>HMAC (SHA-256)</li> <li>Key derivation functions (PBKDF2, scrypt, HKDF)</li> <li>AES encryption (CBC mode)</li> <li>RSA encryption and key transport</li> <li>ECC key generation</li> <li>Digital signatures (RSA)</li> <li>Shamir's Secret Sharing</li> </ul>"},{"location":"packages/crypto_lab/#getting-started","title":"Getting Started","text":""},{"location":"packages/crypto_lab/#running-the-web-application","title":"Running the Web Application","text":"<ul> <li>Launch the Streamlit web app using the main entry point:   <code>python -m crypto_lab.run_web_app [--server-address ADDRESS] [--server-port PORT]</code></li> <li><code>--server-address</code>: Address to bind the Streamlit server (default: system FQDN)</li> <li><code>--server-port</code>: Port to run the Streamlit server on (default: 8503)</li> </ul>"},{"location":"packages/crypto_lab/#source-manual","title":"source manual","text":""},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp","title":"<code>WebApp()</code>","text":"<p>Streamlit-based cryptographic algorithms and protocols playground.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.aes_section","title":"<code>aes_section()</code>","text":"<p>AES encryption (CBC mode) demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.ecc_section","title":"<code>ecc_section()</code>","text":"<p>ECC key generation demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.hmac_section","title":"<code>hmac_section()</code>","text":"<p>HMAC (SHA-256) demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.kdf_section","title":"<code>kdf_section()</code>","text":"<p>Key derivation functions demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.random_bytes_section","title":"<code>random_bytes_section()</code>","text":"<p>Random bytes generation demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.rsa_section","title":"<code>rsa_section()</code>","text":"<p>RSA encryption demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.rsa_transport_section","title":"<code>rsa_transport_section()</code>","text":"<p>RSA key transport demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.run","title":"<code>run()</code>","text":"<p>Run all Streamlit UI sections.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.sha256_hash_section","title":"<code>sha256_hash_section()</code>","text":"<p>SHA-256 hashing demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.shamir_section","title":"<code>shamir_section()</code>","text":"<p>Shamir's Secret Sharing demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.web_app.WebApp.signature_section","title":"<code>signature_section()</code>","text":"<p>Digital signature (RSA) demo.</p>"},{"location":"packages/crypto_lab/#crypto_lab.run_web_app.WebAppLauncher","title":"<code>WebAppLauncher</code>","text":"<p>Command-line interface and process launcher for the crypto_lab Streamlit web application.</p> <p>Methods:</p> Name Description <code>launch</code> <p>Optional[str], port: int) -&gt; bool: Launches the Streamlit web application at the specified address and port.</p> <code>parse_args</code> <p>Parses command-line arguments for server address and port.</p>"},{"location":"packages/crypto_lab/#crypto_lab.run_web_app.WebAppLauncher.launch","title":"<code>launch(address=None, port=8503)</code>  <code>staticmethod</code>","text":"<p>Launch the crypto_lab Streamlit web application.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>Optional[str]</code> <p>Address to bind the server. If None, uses system FQDN.</p> <code>None</code> <code>port</code> <code>int</code> <p>Port to run the server on. Defaults to 8503.</p> <code>8503</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the application started successfully, False otherwise.</p>"},{"location":"packages/crypto_lab/#crypto_lab.run_web_app.WebAppLauncher.parse_args","title":"<code>parse_args()</code>  <code>staticmethod</code>","text":"<p>Parse command-line arguments for server address and port.</p> <p>Returns:</p> Type Description <code>Namespace</code> <p>argparse.Namespace: Parsed arguments with 'server_address' and 'server_port' attributes.</p>"},{"location":"packages/crypto_lab/#crypto_lab.run_web_app.main","title":"<code>main()</code>","text":"<p>Main entry point for launching the crypto_lab Streamlit web application. Parses command-line arguments and starts the web application.</p>"},{"location":"packages/hid_usb_relay/","title":"hid_usb_relay","text":"<p>hid based usb relay package</p>"},{"location":"packages/hid_usb_relay/#source-manual","title":"source manual","text":"<p>This module provides functions to interact with a USB relay device using command-line commands. It allows users to get and set the state of the relay device, as well as retrieve information about the relay device's status.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_all_relay_device_state","title":"<code>get_all_relay_device_state()</code>","text":"<p>Get the status of all connected relay devices.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Status string, or None on error.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_bin_path","title":"<code>get_bin_path()</code>","text":"<p>Get the absolute path to the package's binary folder.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Path to the binary folder.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_default_relay_device_relay_state","title":"<code>get_default_relay_device_relay_state(relay_number)</code>","text":"<p>Get the state of a specific relay on the default device.</p> <p>Parameters:</p> Name Type Description Default <code>relay_number</code> <code>str</code> <p>Relay number as string (e.g., \"1\").</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: State (\"ON\"/\"OFF\") or None on error.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_default_relay_device_state","title":"<code>get_default_relay_device_state()</code>","text":"<p>Get the status of the default relay device.</p> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>Optional[List[str]]: List of relay states, or None on error.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_platform_and_architecture","title":"<code>get_platform_and_architecture()</code>","text":"<p>Get the current system platform and architecture.</p> <p>Returns:</p> Name Type Description <code>tuple</code> <code>Tuple[str, str]</code> <p>(system, architecture), both lowercase strings.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_relay_device_relay_state","title":"<code>get_relay_device_relay_state(relay_id, relay_number)</code>","text":"<p>Get the state of a specific relay on a specific device.</p> <p>Parameters:</p> Name Type Description Default <code>relay_id</code> <code>str</code> <p>Relay device ID.</p> required <code>relay_number</code> <code>str</code> <p>Relay number as string (e.g., \"1\").</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: State (\"ON\"/\"OFF\") or None on error.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_relay_device_state","title":"<code>get_relay_device_state(relay_id)</code>","text":"<p>Get the status of a specific relay device by ID.</p> <p>Parameters:</p> Name Type Description Default <code>relay_id</code> <code>str</code> <p>Relay device ID.</p> required <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>Optional[List[str]]: List of relay states, or None on error.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_relay_executable","title":"<code>get_relay_executable()</code>","text":"<p>Get the path to the relay command-line executable for the current platform.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the relay executable.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_relay_library","title":"<code>get_relay_library()</code>","text":"<p>Get the path to the relay library for the current platform.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the relay library.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.get_relay_path","title":"<code>get_relay_path(file_name)</code>","text":"<p>Build the path to a relay binary/library for the current platform and architecture.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the binary/library file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Full path to the file.</p> <p>Raises:</p> Type Description <code>OSError</code> <p>If the system platform is unsupported.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.run_command","title":"<code>run_command(command)</code>","text":"<p>Run a command using subprocess and return its output.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>List[str]</code> <p>Command and arguments as a list.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: Output string if successful, None otherwise.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.set_default_relay_device_relay_state","title":"<code>set_default_relay_device_relay_state(relay_number, relay_state)</code>","text":"<p>Set the state of a specific relay on the default device.</p> <p>Parameters:</p> Name Type Description Default <code>relay_number</code> <code>str</code> <p>Relay number as string (e.g., \"1\").</p> required <code>relay_state</code> <code>str</code> <p>\"ON\" or \"OFF\".</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.set_default_relay_device_state","title":"<code>set_default_relay_device_state(relay_state)</code>","text":"<p>Set all relays on the default device to a given state.</p> <p>Parameters:</p> Name Type Description Default <code>relay_state</code> <code>str</code> <p>\"ON\" or \"OFF\".</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.set_relay_device_relay_state","title":"<code>set_relay_device_relay_state(relay_id, relay_number, relay_state)</code>","text":"<p>Set the state of a specific relay on a specific device.</p> <p>Parameters:</p> Name Type Description Default <code>relay_id</code> <code>str</code> <p>Relay device ID.</p> required <code>relay_number</code> <code>str</code> <p>Relay number as string (e.g., \"1\").</p> required <code>relay_state</code> <code>str</code> <p>\"ON\" or \"OFF\".</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.usb_relay.set_relay_device_state","title":"<code>set_relay_device_state(relay_id, relay_state)</code>","text":"<p>Set all relays on a specific device to a given state.</p> <p>Parameters:</p> Name Type Description Default <code>relay_id</code> <code>str</code> <p>Relay device ID.</p> required <code>relay_state</code> <code>str</code> <p>\"ON\" or \"OFF\".</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.rest_api.default_relay_control","title":"<code>default_relay_control(relay_number, relay_state)</code>","text":"<p>Controls the state of a relay or all relays on the default relay device.</p> <p>Parameters:</p> Name Type Description Default <code>relay_number</code> <code>str</code> <p>The relay number to control. Use \"all\" to control all relays.</p> required <code>relay_state</code> <code>str</code> <p>The desired state of the relay(s). Typically \"on\" or \"off\".</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the status of the operation and the current state of the relay(s).</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the relay state could not be set or if an internal error occurs.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.rest_api.relay_control_by_id","title":"<code>relay_control_by_id(relay_id, relay_number, relay_state)</code>","text":"<p>Controls the state of a relay by its ID and relay number.</p> <p>Parameters:</p> Name Type Description Default <code>relay_id</code> <code>str</code> <p>The ID of the relay device.</p> required <code>relay_number</code> <code>str</code> <p>The number of the relay to control. Use \"all\" to control all relays.</p> required <code>relay_state</code> <code>str</code> <p>The desired state of the relay (e.g., \"on\", \"off\").</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the status of the operation and the current state of the relay.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the relay state could not be set or if an internal server error occurs.</p>"},{"location":"packages/hid_usb_relay/#hid_usb_relay.rest_api.root_page_help","title":"<code>root_page_help()</code>","text":"<p>Provides help text for the root page.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The help text for the root page.</p>"},{"location":"packages/kmtronic_usb_relay/","title":"kmtronic_usb_relay","text":"<p>This project is a Python package for controlling KMTronics USB relay boards. It provides a simple interfaces to interact with the relays, allowing you to turn them on and off programmatically.</p> <p>It also includes a GUI and FastApi implementation for easy control of the relays.</p>"},{"location":"packages/kmtronic_usb_relay/#usage","title":"usage","text":""},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay_gui","title":"kmtronic_usb_relay_gui","text":"<pre><code>python -m src.kmtronic_usb_relay.four_channel_relay_gui\n</code></pre>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay_api","title":"kmtronic_usb_relay_api","text":"<pre><code>python -m src.kmtronic_usb_relay.four_channel_relay_api\n</code></pre>"},{"location":"packages/kmtronic_usb_relay/#source-manual","title":"source manual","text":""},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController","title":"<code>RelayController(com_port, switch_delay=1.0, serial_utils=None, auto_connect=True)</code>","text":"<p>Controller for KMTronic 4-Channel USB Relay devices.</p> Example <p>with RelayController(\"COM4\") as relay:     relay.turn_on(1)     relay.turn_off(2)     print(relay.statuses)</p> <p>Initialize the RelayController.</p> <p>Parameters:</p> Name Type Description Default <code>com_port</code> <code>str</code> <p>The COM port to which the relay board is connected (e.g., 'COM4').</p> required <code>switch_delay</code> <code>float</code> <p>Delay in seconds after switching a relay (default: 1.0).</p> <code>1.0</code> <code>serial_utils</code> <code>Optional[SerialComUtils]</code> <p>Custom SerialComUtils instance for testing/mocking.</p> <code>None</code> <code>auto_connect</code> <code>bool</code> <p>Automatically open connection on init (default: True).</p> <code>True</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.is_connected","title":"<code>is_connected</code>  <code>property</code>","text":"<p>Check if the relay controller is connected to the COM port.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connected, False otherwise.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.statuses","title":"<code>statuses</code>  <code>property</code>","text":"<p>Get the status of all relays as a dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict[str, str]: Dictionary mapping relay names (e.g., 'R1') to their status ('ON' or 'OFF').</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter the runtime context related to this object.</p> <p>Returns:</p> Name Type Description <code>RelayController</code> <code>RelayController</code> <p>The connected relay controller instance.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Exit the runtime context and close the serial connection.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>Optional[type]</code> <p>Exception type.</p> required <code>exc_val</code> <code>Optional[BaseException]</code> <p>Exception value.</p> required <code>exc_tb</code> <code>Optional[object]</code> <p>Exception traceback.</p> required"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.close","title":"<code>close()</code>","text":"<p>Close the serial connection to the relay board.</p> <p>This method is safe to call multiple times.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.connect","title":"<code>connect()</code>","text":"<p>Open the serial connection to the relay board.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the connection cannot be established.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.get_statuses","title":"<code>get_statuses()</code>","text":"<p>Query and return the status of all relays.</p> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict[str, str]: Dictionary mapping relay names (e.g., 'R1') to their status ('ON' or 'OFF').</p> <code>Dict[str, str]</code> <p>Returns an empty dict if communication fails.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.turn_off","title":"<code>turn_off(relay_number)</code>","text":"<p>Turn OFF the specified relay.</p> <p>Parameters:</p> Name Type Description Default <code>relay_number</code> <code>int</code> <p>Relay number to turn OFF (1-4).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If relay_number is out of range.</p> <code>Exception</code> <p>If sending the command fails.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay.RelayController.turn_on","title":"<code>turn_on(relay_number)</code>","text":"<p>Turn ON the specified relay.</p> <p>Parameters:</p> Name Type Description Default <code>relay_number</code> <code>int</code> <p>Relay number to turn ON (1-4).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If relay_number is out of range.</p> <code>Exception</code> <p>If sending the command fails.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.RelayControllerApi","title":"<code>RelayControllerApi(com_port='COM4', controller=None)</code>","text":"<p>User-friendly wrapper to run the FastAPI server for KMTronic USB Relay.</p> Example <p>api = RelayControllerApi(\"COM4\") api.run()</p> <p>Initialize the API server wrapper.</p> <p>Parameters:</p> Name Type Description Default <code>com_port</code> <code>str</code> <p>Serial port for the relay board (e.g., \"COM4\" or \"/dev/ttyUSB0\").</p> <code>'COM4'</code> <code>controller</code> <code>Optional[RelayController]</code> <p>Optional RelayController instance for testing/mocking.</p> <code>None</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.RelayControllerApi.run","title":"<code>run(host='127.0.0.1', port=8000, reload=False)</code>","text":"<p>Start the FastAPI server using uvicorn.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Hostname or IP address to bind the server.</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>Port number to bind the server.</p> <code>8000</code> <code>reload</code> <code>bool</code> <p>Enable auto-reload (for development).</p> <code>False</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.create_app","title":"<code>create_app(com_port, controller=None)</code>","text":"<p>Create and configure a FastAPI app for the KMTronic 4-Channel USB Relay.</p> <p>Parameters:</p> Name Type Description Default <code>com_port</code> <code>str</code> <p>Serial port for the relay board.</p> required <code>controller</code> <code>Optional[RelayController]</code> <p>Optional RelayController instance (for testing/mocking).</p> <code>None</code> <p>Returns:</p> Type Description <code>FastAPI</code> <p>Configured FastAPI app.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.get_app","title":"<code>get_app()</code>","text":"<p>Get a FastAPI app instance for ASGI servers (e.g., uvicorn). Uses the KMTRONIC_COM_PORT environment variable or defaults to 'COM4'.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.main","title":"<code>main()</code>","text":"<p>Command-line entry point to run the API server.</p> Usage <p><code>python -m src.kmtronic_usb_relay.four_channel_relay_api [COM_PORT] [--host HOST] [--port PORT] [--reload]</code></p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_api.select_com_port","title":"<code>select_com_port()</code>","text":"<p>Helper to select a COM port interactively if not provided. Returns the selected COM port or None if not available.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.RelayControllerGui","title":"<code>RelayControllerGui(com_port='', controller=None, relay_names=None)</code>","text":"<p>User-friendly GUI for KMTronic USB 4-channel relay module. Provides an interface to connect, control, and monitor relays.</p> <p>Initialize the RelayControllerGui.</p> <p>Parameters:</p> Name Type Description Default <code>com_port</code> <code>str</code> <p>Default COM port to select.</p> <code>''</code> <code>controller</code> <code>Optional[RelayController]</code> <p>Optional pre-initialized RelayController.</p> <code>None</code> <code>relay_names</code> <code>Optional[List[str]]</code> <p>Optional list of relay names for labeling buttons.</p> <code>None</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.RelayControllerGui.__del__","title":"<code>__del__()</code>","text":"<p>Destructor to ensure resources are released when the object is deleted.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.RelayControllerGui.close","title":"<code>close()</code>","text":"<p>Close the GUI and release resources. Closes the relay controller connection and destroys the main window.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.RelayControllerGui.refresh_ports","title":"<code>refresh_ports()</code>","text":"<p>Refresh the list of available serial ports and update the port selection combobox. Enables or disables the connect button based on port availability.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.RelayControllerGui.run","title":"<code>run()</code>","text":"<p>Start the GUI main loop. Call this method to launch the application.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.four_channel_relay_gui.main","title":"<code>main()</code>","text":"<p>Entry point for running the GUI as a standalone application.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils","title":"<code>SerialComUtils(baudrate=9600, bytesize=serial.EIGHTBITS, stopbits=serial.STOPBITS_ONE, parity=serial.PARITY_NONE, timeout=2.5)</code>","text":"<p>User-friendly utility class for serial COM port communication.</p> <p>This class provides methods for discovering available serial ports, connecting/disconnecting to a port, and sending/receiving data. It also supports context management for safe resource handling.</p> <p>Initialize SerialComUtils with serial parameters.</p> <p>Parameters:</p> Name Type Description Default <code>baudrate</code> <code>int</code> <p>Serial baudrate (default: 9600).</p> <code>9600</code> <code>bytesize</code> <code>int</code> <p>Number of data bits (default: serial.EIGHTBITS).</p> <code>EIGHTBITS</code> <code>stopbits</code> <code>int</code> <p>Number of stop bits (default: serial.STOPBITS_ONE).</p> <code>STOPBITS_ONE</code> <code>parity</code> <code>str</code> <p>Parity setting (default: serial.PARITY_NONE).</p> <code>PARITY_NONE</code> <code>timeout</code> <code>float</code> <p>Read timeout in seconds, or None for blocking mode (default: 2.5).</p> <code>2.5</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.is_connected","title":"<code>is_connected</code>  <code>property</code>","text":"<p>Check if the serial connection is open.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connected, False otherwise.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter the runtime context related to this object.</p> <p>Returns:</p> Name Type Description <code>SerialComUtils</code> <code>SerialComUtils</code> <p>The instance itself.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Exit the runtime context and close the serial connection.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>Optional[type]</code> <p>Exception type.</p> required <code>exc_val</code> <code>Optional[BaseException]</code> <p>Exception value.</p> required <code>exc_tb</code> <code>Optional[object]</code> <p>Exception traceback.</p> required"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the SerialComUtils instance.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Human-readable summary of the current configuration and port.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.close_connection","title":"<code>close_connection()</code>","text":"<p>Close the connection to the COM port.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if disconnected or already closed, False if error occurred.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.connect","title":"<code>connect(port)</code>","text":"<p>Open a connection to a COM port with the configured parameters.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>str</code> <p>Device name of the port (e.g., 'COM3').</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connection was successful, False otherwise.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.disconnect","title":"<code>disconnect()</code>","text":"<p>Alias for close_connection. Closes the serial connection.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if disconnected or already closed, False if error occurred.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.format_port_detail","title":"<code>format_port_detail(port_info)</code>  <code>staticmethod</code>","text":"<p>Format a port info dictionary as a readable string.</p> <p>Parameters:</p> Name Type Description Default <code>port_info</code> <code>dict</code> <p>Dictionary with keys 'device', 'description', 'hwid'.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Formatted string describing the port.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.get_busy_ports","title":"<code>get_busy_ports()</code>  <code>staticmethod</code>","text":"<p>Attempt to list COM ports that are currently in use (best effort).</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of port device names that are in use.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.get_connection_params","title":"<code>get_connection_params()</code>","text":"<p>Get the current serial connection parameters.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Any]</code> <p>Dictionary containing baudrate, bytesize, stopbits, parity, and timeout.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.get_port_details","title":"<code>get_port_details()</code>  <code>staticmethod</code>","text":"<p>Get details of all available COM ports.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[dict]: Each dict contains: - device (str): COM port number (e.g., 'COM1') - description (str): Port description - hwid (str): Hardware ID</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.get_port_names","title":"<code>get_port_names()</code>  <code>staticmethod</code>","text":"<p>List all available COM port device names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of device names (e.g., ['COM1', 'COM2']).</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.log_port_details","title":"<code>log_port_details(port_name=None)</code>  <code>staticmethod</code>","text":"<p>Log details of all COM ports or a specific port if port_name is given.</p> <p>Parameters:</p> Name Type Description Default <code>port_name</code> <code>str</code> <p>Device name of the port (e.g., 'COM3').</p> <code>None</code>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.open_connection","title":"<code>open_connection(port)</code>","text":"<p>Alias for connect. Opens a connection to the specified port.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>str</code> <p>Device name of the port.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connection was successful, False otherwise.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.receive","title":"<code>receive(size=1, as_int_list=False)</code>","text":"<p>Receive data from the serial port.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>Number of bytes to read (default: 1).</p> <code>1</code> <code>as_int_list</code> <code>bool</code> <p>If True, return a list of ints instead of bytes.</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[Union[bytes, List[int]]]</code> <p>bytes or List[int] or None: Received data, or None if not connected.</p>"},{"location":"packages/kmtronic_usb_relay/#kmtronic_usb_relay.com_utils.SerialComUtils.send","title":"<code>send(data)</code>","text":"<p>Send data to the serial port.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Bytes to send.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if sent, False if not connected.</p>"},{"location":"packages/py_clocks/","title":"py_clocks","text":"<p>The <code>py_clocks</code> package is a Python-based project designed for displaying multiple timezone clocks on a Windows desktop.</p> <p>By default, the app shows the time in the following timezones:   - Asia/Tokyo   - Asia/Kolkata   - Europe/Berlin</p> <p></p> <p>Screenshot of the <code>py_clocks</code> application showing multiple timezone clocks.</p>"},{"location":"packages/py_clocks/#building-and-running-the-project","title":"Building and Running the Project","text":"<p><code>.venv/Scripts/python.exe packages/py_clocks/src/py_clocks/py_clocks.py</code></p>"},{"location":"packages/py_clocks/#creating-an-executable","title":"Creating an Executable","text":"<p>To create a standalone executable for the <code>py_clocks</code> package using PyInstaller, use the provided script:</p> <p><code>pyinstaller --onefile packages/py_clocks/src/py_clocks/py_clocks.py</code></p> <p>Locate the executable: The generated executable will be located in the <code>dist</code> directory as <code>py_clocks.exe</code>.</p>"},{"location":"packages/py_uds_demo/","title":"py_uds_demo","text":""},{"location":"packages/py_uds_demo/#overview","title":"Overview","text":"<p><code>py_uds_demo</code> is a Python package for learning and practicing the Unified Diagnostic Services (UDS) protocol. It provides a simulator with CLI, GUI, and Web interfaces, allowing users to send diagnostic requests and view responses as per ISO 14229.</p>"},{"location":"packages/py_uds_demo/#features","title":"Features","text":"<ul> <li>UDS protocol simulation (ISO 14229)</li> <li>CLI, GUI (CustomTkinter), and Web (Gradio) interfaces</li> <li>Diagnostic session management, data transmission, input/output control, and more</li> <li>Extensible and modular codebase</li> </ul>"},{"location":"packages/py_uds_demo/#source-manual","title":"source manual","text":""},{"location":"packages/py_uds_demo/#py_uds_demo.core.client.UdsClient","title":"<code>UdsClient()</code>","text":"<p>A client for sending UDS requests and formatting responses.</p> <p>This class interfaces with the UdsServer to send diagnostic requests and process the corresponding responses.</p> <p>Attributes:</p> Name Type Description <code>server</code> <code>UdsServer</code> <p>An instance of the UdsServer to process requests.</p> <p>Initializes the UdsClient.</p> <p>This creates a new instance of the UdsServer, which will be used for processing all UDS requests initiated by this client.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.client.UdsClient.format_request","title":"<code>format_request(request)</code>","text":"<p>Formats a UDS request list into a human-readable string.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>list</code> <p>A list of integers representing the request bytes.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the UDS request, with each byte</p> <code>str</code> <p>formatted as a two-digit hexadecimal number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.client.UdsClient.send_request","title":"<code>send_request(data_stream, return_formatted_stream)</code>","text":"<p>Sends a UDS request to the server and retrieves the response.</p> <p>The request is logged, processed by the server, and the response is also logged. The response can be returned as either a raw list of bytes or a formatted string.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>Union[list, list[int]]</code> <p>The request data to send to the server, as a list of integers.</p> required <code>return_formatted_stream</code> <code>bool</code> <p>If True, the response is returned as a formatted string. Otherwise, it is returned as a list of integers.</p> required <p>Returns:</p> Type Description <code>Union[list, str]</code> <p>The server's response, which can be either a list of bytes or a</p> <code>Union[list, str]</code> <p>formatted string, depending on the value of <code>return_formatted_stream</code>.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.server.UdsServer","title":"<code>UdsServer()</code>","text":"<p>Implements the UDS server functionality.</p> <p>This class initializes all supported UDS services, constants, and response handlers. It provides a method to process incoming diagnostic requests and route them to the appropriate service handler.</p> <p>Attributes:</p> Name Type Description <code>DEFAULT_LOG_FILE</code> <code>str</code> <p>The default path for the log file.</p> <code>logger</code> <code>Logger</code> <p>The logger instance for the server.</p> <code>SID</code> <code>Sid</code> <p>Service identifiers.</p> <code>SFID</code> <code>Sfid</code> <p>Sub-function identifiers.</p> <code>NRC</code> <code>Nrc</code> <p>Negative response codes.</p> <code>did</code> <code>Did</code> <p>Diagnostic identifiers.</p> <code>memory</code> <code>Memory</code> <p>Memory map and data.</p> <code>positive_response</code> <code>PositiveResponse</code> <p>Handler for positive responses.</p> <code>negative_response</code> <code>NegativeResponse</code> <p>Handler for negative responses.</p> <code>diagnostic_and_commmunication_management</code> <code>NegativeResponse</code> <p>Diagnostic and communication management service handler.</p> <code>data_transmission</code> <code>NegativeResponse</code> <p>Data transmission service handler.</p> <code>stored_data_transmission</code> <code>NegativeResponse</code> <p>Stored data transmission service handler.</p> <code>input_output_contol</code> <code>NegativeResponse</code> <p>Input/output control service handler.</p> <code>remote_activation_of_routine</code> <code>NegativeResponse</code> <p>Remote activation of routine service handler.</p> <code>upload_download</code> <code>NegativeResponse</code> <p>Upload/download service handler.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.server.UdsServer.supported_services","title":"<code>supported_services</code>  <code>property</code>","text":"<p>Returns a list of all supported UDS service identifiers (SIDs).</p> <p>Returns:</p> Type Description <code>list</code> <p>A list of integers representing the supported SIDs.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.server.UdsServer.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes an incoming UDS request and returns a response.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>A list of integers representing the incoming diagnostic request bytes.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of integers representing the response to the request.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Did","title":"<code>Did()</code>","text":"<p>Diagnostic Identifiers (DIDs) for UDS.</p> <p>This class contains constants for various diagnostic identifiers.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory","title":"<code>Memory()</code>","text":"<p>A simulated memory map for the UDS server.</p> <p>This class holds memory addresses, their corresponding values, and other data like DTCs and writable DIDs.</p> <p>Attributes:</p> Name Type Description <code>writable_dids</code> <code>list</code> <p>A list of DIDs that are writable.</p> <code>did_data</code> <code>dict</code> <p>A dictionary to store data for DIDs.</p> <code>memory_map</code> <code>dict</code> <p>A dictionary representing the memory layout.</p> <code>dtcs</code> <code>list</code> <p>A list of Diagnostic Trouble Codes.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.ecu_installation_date","title":"<code>ecu_installation_date</code>  <code>property</code>","text":"<p>The ECU installation date.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.ecu_manufacturing_date","title":"<code>ecu_manufacturing_date</code>  <code>property</code>","text":"<p>The ECU manufacturing date.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.ecu_serial_number","title":"<code>ecu_serial_number</code>  <code>property</code>","text":"<p>The ECU serial number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.exhaust_regulation_type_approval_number","title":"<code>exhaust_regulation_type_approval_number</code>  <code>property</code>","text":"<p>The exhaust regulation type approval number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.manufacturer_ecu_software_number","title":"<code>manufacturer_ecu_software_number</code>  <code>property</code>","text":"<p>The manufacturer's ECU software number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.manufacturer_ecu_software_version","title":"<code>manufacturer_ecu_software_version</code>  <code>property</code>","text":"<p>The manufacturer's ECU software version.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.manufacturer_spare_part_number","title":"<code>manufacturer_spare_part_number</code>  <code>property</code>","text":"<p>The manufacturer's spare part number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.programming_date","title":"<code>programming_date</code>  <code>property</code>","text":"<p>The programming date.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.repair_shop_code","title":"<code>repair_shop_code</code>  <code>property</code>","text":"<p>The repair shop code.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.supported_functional_units","title":"<code>supported_functional_units</code>  <code>property</code>","text":"<p>The supported functional units.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.system_supplier_ecu_software_number","title":"<code>system_supplier_ecu_software_number</code>  <code>property</code>","text":"<p>The system supplier's ECU software number.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.system_supplier_ecu_software_version","title":"<code>system_supplier_ecu_software_version</code>  <code>property</code>","text":"<p>The system supplier's ECU software version.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Memory.vehicle_identification_number","title":"<code>vehicle_identification_number</code>  <code>property</code>","text":"<p>The vehicle identification number (VIN).</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Nrc","title":"<code>Nrc()</code>","text":"<p>Negative Response Codes (NRCs) for UDS.</p> <p>This class contains constants for all negative response codes as defined in the ISO 14229 standard. Each NRC has a long name and a short alias.</p> See Also <p>ISO 14229</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Sfid","title":"<code>Sfid()</code>","text":"<p>Sub-function Identifiers (SFIDs) for UDS.</p> <p>This class contains constants for all sub-function identifiers as defined in the ISO 14229 standard. Each SFID has a long name and a short alias.</p> See Also <p>ISO 14229</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.Sid","title":"<code>Sid()</code>","text":"<p>Service Identifiers (SIDs) for UDS.</p> <p>This class contains constants for all service identifiers as defined in the ISO 14229 standard. Each SID has a long name and a short alias.</p> See Also <p>ISO 14229</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.helpers.split_integer_to_bytes","title":"<code>split_integer_to_bytes(value)</code>","text":"<p>Splits an integer into a list of bytes (little-endian).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The integer to split.</p> required <p>Returns:</p> Type Description <code>list[int]</code> <p>A list of integers, where each integer is a byte.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.responses.NegativeResponse","title":"<code>NegativeResponse()</code>","text":"<p>Handles the creation of negative UDS responses.</p> <p>Initializes the NegativeResponse handler.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.responses.NegativeResponse.check_subfunction_supported","title":"<code>check_subfunction_supported(sfid, supported_subfunctions)</code>","text":"<p>Checks if a sub-function is supported.</p> <p>Parameters:</p> Name Type Description Default <code>sfid</code> <code>int</code> <p>The sub-function identifier to check.</p> required <code>supported_subfunctions</code> <code>list</code> <p>A list of supported sub-function identifiers.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the sub-function is supported, False otherwise.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.responses.NegativeResponse.report_negative_response","title":"<code>report_negative_response(sid, nrc)</code>","text":"<p>Constructs a negative response message.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>int</code> <p>The service identifier of the request.</p> required <code>nrc</code> <code>int</code> <p>The negative response code.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of integers representing the complete negative response</p> <code>list</code> <p>message.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.responses.PositiveResponse","title":"<code>PositiveResponse()</code>","text":"<p>Handles the creation of positive UDS responses.</p> <p>Initializes the PositiveResponse handler.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.responses.PositiveResponse.report_positive_response","title":"<code>report_positive_response(sid, data)</code>","text":"<p>Constructs a positive response message.</p> <p>Parameters:</p> Name Type Description Default <code>sid</code> <code>int</code> <p>The service identifier of the request.</p> required <code>data</code> <code>list</code> <p>A list of integers representing the response data.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of integers representing the complete positive response</p> <code>list</code> <p>message, including the positive response SID.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.AccessTimingParameter","title":"<code>AccessTimingParameter(uds_server)</code>","text":"<p>Handles Access Timing Parameter (0x83) service requests.</p> What <p>This service is used to read or write the communication timing parameters between the client and the server.</p> Why <p>In certain situations, like on slow or high-latency networks, it may be necessary to adjust the default timing parameters (e.g., P2, P2*) to ensure reliable communication.</p> How <p>The client can send a request to read the current timing parameters or to set new ones.</p> Real-world example <p>A diagnostic tool is connected to an ECU over a wireless network, which has a higher latency than a direct wired connection. To prevent communication timeouts, the tool uses this service to extend the timing parameters, allowing more time for responses.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p> <code>timing_parameters</code> <p>A dictionary of timing parameters.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.AccessTimingParameter.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes an Access Timing Parameter request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.CommunicationControl","title":"<code>CommunicationControl(uds_server)</code>","text":"<p>Handles Communication Control (0x28) service requests.</p> What <p>This service is used to control the communication of the server (ECU) on the network. It can enable or disable the transmission and/or reception of certain types of messages.</p> Why <p>It's useful for isolating an ECU during diagnostics or to prevent interference during sensitive operations like software flashing. For example, you can stop an ECU from sending messages that might disrupt other nodes on the network while you are reprogramming it.</p> How <p>The client sends a request with the SID 0x28, a sub-function to specify the control type (e.g., enableRxAndTx, disableRx), and a parameter for the communication type (e.g., normal communication, network management).</p> Real-world example <p>Before updating the firmware on an airbag control unit, a technician's tool sends a Communication Control request to disable the transmission of normal messages from that ECU. This prevents the ECU from sending any potentially conflicting messages during the update. Once the update is complete, the tool re-enables communication.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p> <code>supported_communication_types</code> <p>A list of supported communication types.</p> <code>supported_sessions</code> <p>A list of sessions in which communication control is allowed.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.CommunicationControl.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Communication Control request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.ControlDtcSetting","title":"<code>ControlDtcSetting(uds_server)</code>","text":"<p>Handles Control DTC Setting (0x85) service requests.</p> What <p>This service is used to enable or disable the setting of Diagnostic Trouble Codes (DTCs) in the server (ECU).</p> Why <p>During maintenance or testing, some actions might trigger false DTCs. This service allows a client to temporarily disable DTC reporting to avoid filling the fault memory with irrelevant codes.</p> How <p>The client sends a request with the SID 0x85 and a sub-function to either enable (0x01) or disable (0x02) DTC setting.</p> Real-world example <p>A technician is replacing a sensor. To prevent the ECU from storing a DTC for the disconnected sensor during the replacement process, they first use this service to disable DTC setting. After the new sensor is installed, they re-enable it.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p> <code>supported_sessions</code> <p>A list of sessions in which this service is allowed.</p> <code>dtc_setting</code> <p>The current DTC setting (ON or OFF).</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.ControlDtcSetting.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Control DTC Setting request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.DiagnosticSessionControl","title":"<code>DiagnosticSessionControl(uds_server)</code>","text":"<p>Handles Diagnostic Session Control (0x10) service requests.</p> What <p>This service is used to switch the server (ECU) to a specific diagnostic session. Each session can grant different levels of access to diagnostic services and data.</p> Why <p>Different tasks require different security levels. For example, reading basic data might be allowed in a default session, but reprogramming the ECU would require switching to a programming session with higher security access.</p> How <p>The client sends a request with the SID 0x10 followed by a single byte sub-function indicating the desired session.</p> Real-world example <p>A technician uses a diagnostic tool to connect to a car. The tool starts in the default session, which allows reading error codes. To perform a software update, the tool requests to switch to the programming session. If the security checks pass, the ECU switches to the programming session, allowing the update to proceed.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>active_session</code> <p>The currently active diagnostic session.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p> <code>P2_HIGH</code> <code>int</code> <p>P2 timing parameter high byte.</p> <code>P2_LOW</code> <code>int</code> <p>P2 timing parameter low byte.</p> <code>P2_STAR_HIGH</code> <code>int</code> <p>P2* timing parameter high byte.</p> <code>P2_STAR_LOW</code> <code>int</code> <p>P2* timing parameter low byte.</p> <code>tester_present_active</code> <code>bool</code> <p>True if Tester Present is active.</p> <code>session_timeout</code> <code>int</code> <p>The timeout for non-default sessions in seconds.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.DiagnosticSessionControl.__del__","title":"<code>__del__()</code>","text":"<p>Stops the session timeout thread.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.DiagnosticSessionControl.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Diagnostic Session Control request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.EcuReset","title":"<code>EcuReset(uds_server)</code>","text":"<p>Handles ECU Reset (0x11) service requests.</p> What <p>This service is used to restart an ECU. Different types of resets can be performed, such as a hard reset (simulating a power cycle) or a soft reset (re-initializing software).</p> Why <p>An ECU reset is often necessary to recover an ECU from a faulty state, to apply new settings, or to complete a software update process.</p> How <p>The client sends a request with the SID 0x11 followed by a single byte sub-function indicating the desired reset type.</p> Real-world example <p>After successfully flashing a new firmware version to an ECU, a technician sends an ECU Reset request with the 'hardReset' sub-function. This forces the ECU to restart, loading the new firmware and completing the update process.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.EcuReset.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes an ECU Reset request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.LinkControl","title":"<code>LinkControl(uds_server)</code>","text":"<p>Handles Link Control (0x87) service requests.</p> What <p>This service is used to control the baud rate of the communication link between the client and the server.</p> Why <p>It can be used to switch to a higher baud rate for faster data transfer, which is particularly useful for time-consuming operations like software flashing.</p> How <p>The process typically involves the client first verifying that the server can support the new baud rate and then sending a command to transition to it.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.LinkControl.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Link Control request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.ResponseOnEvent","title":"<code>ResponseOnEvent(uds_server)</code>","text":"<p>Handles Response On Event (0x86) service requests.</p> What <p>This service allows a client to request that the server (ECU) automatically sends a response when a specific event occurs, instead of the client having to poll for it.</p> Why <p>It's useful for monitoring real-time events without the overhead of continuous polling. For example, a client can be notified immediately when a DTC is set or a sensor value crosses a certain threshold.</p> How <p>The client sends a request to register an event (e.g., onDtcStatusChange) and specifies the response that the server should send when that event occurs.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.ResponseOnEvent.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Response On Event request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.SecuredDataTransmission","title":"<code>SecuredDataTransmission(uds_server)</code>","text":"<p>Handles Secured Data Transmission (0x84) service requests.</p> What <p>This service is used to transmit data securely between the client and the server, providing cryptographic protection for the data.</p> Why <p>It's used when sensitive data needs to be exchanged over a potentially insecure network, ensuring confidentiality and integrity.</p> How <p>The implementation details, including the cryptographic algorithms, are typically manufacturer-specific.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.SecuredDataTransmission.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Secured Data Transmission request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.SecurityAccess","title":"<code>SecurityAccess(uds_server)</code>","text":"<p>Handles Security Access (0x27) service requests.</p> What <p>This service provides a security mechanism to protect certain services from unauthorized access. It uses a seed-and-key exchange to authenticate the client.</p> Why <p>It's crucial to prevent unauthorized users from accessing critical ECU functions, such as flashing new software, changing the VIN, or modifying calibration data.</p> How <p>The client requests a 'seed' from the ECU. Using a secret algorithm, the client calculates a 'key' from the seed and sends it back. If the key is correct, the ECU grants access to protected services.</p> Real-world example <p>A manufacturer protects the engine's fuel map from being modified. To change the fuel map, a diagnostic tool must first use the Security Access service. The tool requests a seed, calculates the key, and sends it back. If successful, the tool can then use the Write Data By Identifier service to update the fuel map.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>seed_value</code> <p>The last generated seed.</p> <code>seed_sent</code> <p>True if a seed has been sent to the client.</p> <code>security_unlock_success</code> <p>True if the ECU is unlocked.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p> <code>supported_sessions</code> <p>A list of sessions in which security access is allowed.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.SecurityAccess.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Security Access request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.TesterPresent","title":"<code>TesterPresent(uds_server)</code>","text":"<p>Handles Tester Present (0x3E) service requests.</p> What <p>This service is used to indicate to the server (ECU) that a client is still connected and that the current diagnostic session should remain active.</p> Why <p>If there is no communication for a certain period, the ECU will automatically time out and return to the default diagnostic session. The Tester Present service prevents this from happening.</p> How <p>The client periodically sends a request with the SID 0x3E. A sub-function can be used to either request a response from the server or suppress it.</p> Real-world example <p>A technician is monitoring live data from a sensor, which requires the ECU to be in the extended diagnostic session. To prevent the session from timing out while they are observing the data, the diagnostic tool sends a Tester Present message every few seconds.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>tester_present_request_received</code> <p>True if a Tester Present request has been received.</p> <code>supported_subfunctions</code> <p>A list of supported sub-function identifiers.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.diagnostic_and_commmunication_management.TesterPresent.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Tester Present request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response, or an empty list if the</p> <code>list</code> <p>response is suppressed.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.DynamicallyDefineDataIdentifier","title":"<code>DynamicallyDefineDataIdentifier(uds_server)</code>","text":"<p>Handles Dynamically Define Data Identifier (0x2C) service requests.</p> What <p>This service allows a client to dynamically define a new Data Identifier (DID) at runtime. This new DID can be composed of data from other existing DIDs or from specific memory addresses.</p> Why <p>It's useful when you need to read a combination of data that is not available in a single, predefined DID. Instead of sending multiple requests, you can create one dynamic DID to get all the data in a single response, which can be more efficient.</p> How <p>The client sends a request with the SID 0x2C and the definition of the new DID, which includes the source DIDs or memory addresses.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.DynamicallyDefineDataIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Dynamically Define Data Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadDataByIdentifier","title":"<code>ReadDataByIdentifier(uds_server)</code>","text":"<p>Handles Read Data By Identifier (0x22) service requests.</p> What <p>This service is used to read data from the server (ECU), identified by a 2-byte Data Identifier (DID). It's one of the most common UDS services.</p> Why <p>It provides a standardized way to read a wide variety of data, such as sensor values, configuration settings, part numbers, software versions, and more.</p> How <p>The client sends a request with the SID 0x22 followed by one or more 2-byte DIDs. The server responds with the SID 0x62, the requested DID(s), and the corresponding data.</p> Real-world example <p>A workshop tool needs to verify the software version of an ECU. It sends a Read Data By Identifier request with the DID for the software version (e.g., 0xF188). The ECU responds with the version, which the tool then displays to the technician.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadDataByIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Read Data By Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadDataByPeriodicIdentifier","title":"<code>ReadDataByPeriodicIdentifier(uds_server)</code>","text":"<p>Handles Read Data By Periodic Identifier (0x2A) service requests.</p> What <p>This service is used to request that the server (ECU) periodically transmits the data values for one or more Data Identifiers (DIDs).</p> Why <p>It's an efficient way to monitor data over time without the need for the client to continuously send requests. This is useful for data logging or for displaying live data on a diagnostic tool.</p> How <p>The client sends a request with the SID 0x2A, specifying the DIDs to be read and the transmission rate. The server then starts sending the data periodically until instructed to stop.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadDataByPeriodicIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Read Data By Periodic Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadMemoryByAddress","title":"<code>ReadMemoryByAddress(uds_server)</code>","text":"<p>Handles Read Memory By Address (0x23) service requests.</p> What <p>This service is used to read data from a specific memory address in the server (ECU).</p> Why <p>It provides a low-level way to access the ECU's memory, which is useful for debugging, reverse engineering, or accessing data that is not available through a Data Identifier (DID).</p> How <p>The client sends a request with the SID 0x23, followed by the memory address and the number of bytes to read. The server responds with the SID 0x63 and the requested data.</p> Real-world example <p>A software developer is debugging a new feature and wants to inspect the value of a variable in real-time. They use the Read Memory By Address service to read the memory location where that variable is stored, helping them to understand its behavior.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadMemoryByAddress.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Read Memory By Address request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadScalingDataByIdentifier","title":"<code>ReadScalingDataByIdentifier(uds_server)</code>","text":"<p>Handles Read Scaling Data By Identifier (0x24) service requests.</p> What <p>This service is used to retrieve the scaling information for a data value that is returned by the ReadDataByIdentifier service.</p> Why <p>Some data values are transmitted as scaled integers to save space or for other reasons. This service provides the necessary information (e.g., a formula or a lookup table) to convert the raw integer value into a physical value (e.g., a floating-point number with a unit).</p> How <p>The client sends a request with the SID 0x24 and a DID. The server responds with the scaling information for that DID.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.ReadScalingDataByIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Read Scaling Data By Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.WriteDataByIdentifier","title":"<code>WriteDataByIdentifier(uds_server)</code>","text":"<p>Handles Write Data By Identifier (0x2E) service requests.</p> What <p>This service is used to write data to the server (ECU) at a location specified by a Data Identifier (DID).</p> Why <p>It's used to change the ECU's behavior or update its configuration. This can include things like setting a new speed limit, updating the VIN, or changing calibration values.</p> How <p>The client sends a request with the SID 0x2E, the DID to be written, and the data to write. The server responds with the SID 0x6E and the DID that was written to confirm the operation.</p> Real-world example <p>A car manufacturer wants to update the service date in the instrument cluster. A technician uses a diagnostic tool to send a Write Data By Identifier request with the DID for the service date and the new date. The instrument cluster then updates its display accordingly.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.WriteDataByIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Write Data By Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.WriteMemoryByAddress","title":"<code>WriteMemoryByAddress(uds_server)</code>","text":"<p>Handles Write Memory By Address (0x3D) service requests.</p> What <p>This service is used to write data to a specific memory address in the server (ECU).</p> Why <p>It provides a low-level way to modify the ECU's memory, which is useful for debugging, applying patches, or writing data to memory locations that are not accessible through a Data Identifier (DID).</p> How <p>The client sends a request with the SID 0x3D, the memory address, and the data to be written. The server responds with the SID 0x7D to confirm the operation.</p> Real-world example <p>A developer needs to apply a small patch to the ECU's software without performing a full reflash. They can use the Write Memory By Address service to write the patched code directly into the specified memory locations.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.data_transmission.WriteMemoryByAddress.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Write Memory By Address request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.stored_data_transmission.ClearDiagnosticInformation","title":"<code>ClearDiagnosticInformation(uds_server)</code>","text":"<p>Handles Clear Diagnostic Information (0x14) service requests.</p> What <p>This service is used to clear Diagnostic Trouble Codes (DTCs) from the server's (ECU's) memory.</p> Why <p>After a vehicle has been repaired, the stored DTCs related to the fixed issue need to be cleared. This service provides the means to do so.</p> How <p>The client sends a request with the SID 0x14, followed by a 3-byte groupOfDTC parameter, which specifies which DTCs to clear. A value of 0xFFFFFF is typically used to clear all DTCs.</p> Real-world example <p>A \"Check Engine\" light is on. A technician reads the DTCs and finds a code for a faulty sensor. After replacing the sensor, the technician uses this service to clear the DTC, which turns off the light.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.stored_data_transmission.ClearDiagnosticInformation.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Clear Diagnostic Information request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.stored_data_transmission.ReadDtcInformation","title":"<code>ReadDtcInformation(uds_server)</code>","text":"<p>Handles Read DTC Information (0x19) service requests.</p> What <p>This service is used to read Diagnostic Trouble Codes (DTCs) and related data from the server's (ECU's) memory.</p> Why <p>It's the primary service for diagnosing vehicle problems. By reading DTCs, a technician can identify the system or component that is faulty. It also allows reading additional data, like \"freeze frames\" or \"snapshot data,\" which is a snapshot of the vehicle's state at the time the fault occurred.</p> How <p>The client sends a request with the SID 0x19 and a sub-function that specifies what information to read (e.g., number of DTCs, DTCs by status mask, snapshot data).</p> Real-world example <p>A technician connects a diagnostic tool to a car with the \"Check Engine\" light on. The tool uses this service with the 'reportDTCByStatusMask' sub-function to retrieve all active DTCs. The tool might then use another sub-function to read the snapshot data for a specific DTC to get more context about when the fault occurred.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.stored_data_transmission.ReadDtcInformation.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Read DTC Information request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.input_output_contol.InputOutputControlByIdentifier","title":"<code>InputOutputControlByIdentifier(uds_server)</code>","text":"<p>Handles Input Output Control By Identifier (0x2F) service requests.</p> What <p>This service allows a client to take control of a server's (ECU's) inputs and outputs.</p> Why <p>It's used for testing and diagnostics. For example, a technician can use it to manually activate an actuator (like a fan or a motor) to verify its operation, or to simulate a sensor input to see how the ECU responds.</p> How <p>The client sends a request with the SID 0x2F, a Data Identifier (DID) to specify the I/O channel, and a control option (e.g., return control to ECU, freeze current state, short term adjustment).</p> Real-world example <p>A technician suspects a radiator fan is faulty. They use a diagnostic tool to send an Input Output Control By Identifier request to the engine control unit, commanding it to turn on the fan. If the fan starts, the technician knows the fan motor is working and the issue lies elsewhere, perhaps with the temperature sensor or control logic.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>io_control_status</code> <p>A dictionary to store the status of I/O controls.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.input_output_contol.InputOutputControlByIdentifier.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes an Input Output Control By Identifier request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.remote_activation_of_routine.RoutineControl","title":"<code>RoutineControl(uds_server)</code>","text":"<p>Handles Routine Control (0x31) service requests.</p> What <p>This service is used to start, stop, and request the results of a routine in the server (ECU).</p> Why <p>Routines are used to perform more complex tasks than what can be achieved with a simple read or write service. This can include things like running a self-test, erasing memory, or learning new adaptive values.</p> How <p>The client sends a request with the SID 0x31, a sub-function (e.g., startRoutine, stopRoutine, requestRoutineResults), and a 2-byte routine identifier.</p> Real-world example <p>A technician wants to perform a self-test on the ABS. They use a diagnostic tool to send a Routine Control request with the 'startRoutine' sub-function and the routine identifier for the ABS self-test. After the routine completes, they send another request with 'requestRoutineResults' to check if the test passed.</p> <p>Attributes:</p> Name Type Description <code>uds_server</code> <code>UdsServer</code> <p>The UDS server instance.</p> <code>routine_status</code> <p>A dictionary to store the status of routines.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.remote_activation_of_routine.RoutineControl.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Routine Control request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of bytes representing the response.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestDownload","title":"<code>RequestDownload(uds_server)</code>","text":"<p>Handles Request Download (0x34) service requests.</p> What <p>This service is used to initiate a data download from the client to the server (ECU). It's the first step in the process of flashing new software or writing a large block of data to the ECU.</p> Why <p>It prepares the ECU to receive data, and the ECU can specify the maximum size of the data blocks it can accept at a time.</p> How <p>The client sends a request with the SID 0x34, the memory address where the data should be stored, and the total size of the data.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestDownload.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Request Download request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestFileTransfer","title":"<code>RequestFileTransfer(uds_server)</code>","text":"<p>Handles Request File Transfer (0x38) service requests.</p> What <p>This service provides a more advanced and flexible way to transfer files between the client and the server, often with file-system-like operations.</p> Why <p>It's designed to be more powerful than the older upload/download services, supporting more complex use cases.</p> How <p>The specifics are complex and can vary between implementations.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestFileTransfer.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Request File Transfer request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestTransferExit","title":"<code>RequestTransferExit(uds_server)</code>","text":"<p>Handles Request Transfer Exit (0x37) service requests.</p> What <p>This service is used to terminate a data transfer sequence.</p> Why <p>It signals the end of the upload or download process, allowing the server to perform any necessary cleanup or verification.</p> How <p>The client sends a request with the SID 0x37 to indicate that the transfer is complete.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestTransferExit.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Request Transfer Exit request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestUpload","title":"<code>RequestUpload(uds_server)</code>","text":"<p>Handles Request Upload (0x35) service requests.</p> What <p>This service is used to initiate a data upload from the server (ECU) to the client.</p> Why <p>It's used to read large blocks of data from the ECU, such as log files, calibration data, or the entire memory content.</p> How <p>The client sends a request with the SID 0x35, the memory address of the data to be uploaded, and the size of the data.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.RequestUpload.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Request Upload request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.TransferData","title":"<code>TransferData(uds_server)</code>","text":"<p>Handles Transfer Data (0x36) service requests.</p> What <p>This service is used to transfer data blocks between the client and the server during an upload or download operation.</p> Why <p>It's the workhorse of the data transfer process, responsible for moving the actual data in chunks.</p> How <p>After a download or upload is initiated, the client (for downloads) or server (for uploads) sends a sequence of Transfer Data requests, each containing a block of data.</p> Note <p>This service is not fully implemented in this simulator.</p>"},{"location":"packages/py_uds_demo/#py_uds_demo.core.utils.services.upload_download.TransferData.process_request","title":"<code>process_request(data_stream)</code>","text":"<p>Processes a Transfer Data request.</p> <p>Parameters:</p> Name Type Description Default <code>data_stream</code> <code>list</code> <p>The request data stream.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A negative response, as this service is not supported.</p>"},{"location":"packages/py_uds_lib/","title":"py_uds_lib","text":"<p>Python package for creating UDS requests</p> <p>**NOTE: this package not yet ready to use. implementation in progress.</p>"},{"location":"packages/py_uds_lib/#source-manual","title":"source manual","text":"<p>Python package for creating UDS requests</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Nrc","title":"<code>Nrc()</code>","text":"<p>This class holds all negative response codes name and its values respectively. Check ISO 14229 doc for more information.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services","title":"<code>Services()</code>","text":"<p>This class holds all UDS services. Use class methods to create diagnostic request in string format.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.access_timing_parameter","title":"<code>access_timing_parameter(timing_parameter_access_type, timing_parameter_request_record=None)</code>","text":"<p>service is used to read and change the default timing parameters of a communication link for the duration this communication link is active. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>timing_parameter_access_type</code> <code>int</code> <p>1 byte parameter is used by the service to select the specific behavior of the server.</p> required <code>timing_parameter_request_record</code> <code>Nlist[int]</code> <p>parameter record contains the timing parameter values to be set in the server. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.clear_diagnostic_information","title":"<code>clear_diagnostic_information(group_of_dtc)</code>","text":"<p>service is used by the client to clear diagnostic information in one or multiple servers memory. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>group_of_dtc</code> <code>int</code> <p>parameter contains a 3-byte value indicating the group of DTCs (e.g., Powertrain, Body, Chassis) or the particular DTC to be cleared.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.communication_control","title":"<code>communication_control(control_type, communication_type, node_identification_number=None)</code>","text":"<p>service used to switch on/off the transmission and/or the reception of certain messages. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>int</code> <p>1 byte parameter contains information on how the server shall modify the communication type.</p> required <code>communication_type</code> <code>int</code> <p>1 byte parameter is used to reference the kind of communication to be controlled.</p> required <code>node_identification_number</code> <code>int</code> <p>2 byte parameter is used to identify a node on a sub-network somewhere in the vehicle. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.control_dtc_setting","title":"<code>control_dtc_setting(dtc_setting_type, dtc_setting_control_option_record=None)</code>","text":"<p>service used by a client to stop or resume the updating of DTC status bits in the server. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>dtc_setting_type</code> <code>int</code> <p>1 byte parameter used by the service to indicate to the server(s) whether diagnostic trouble code status bit updating shall stop or start again.</p> required <code>dtc_setting_control_option_record</code> <code>list[int]</code> <p>parameter record is user optional to transmit data to a server when controlling the updating of DTC status bits. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.diagnostic_session_control","title":"<code>diagnostic_session_control(diagnostic_session_type)</code>","text":"<p>service is used to enable different diagnostic sessions in the server(s). Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>diagnostic_session_type</code> <code>int</code> <p>1 byte parameter is used by the service to select the specific behavior of the server</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.dynamically_define_data_identifier","title":"<code>dynamically_define_data_identifier(definition_type, supporting_params)</code>","text":"<p>service allows the client to dynamically define in a server a data identifier that can be read via the ReadDataByIdentifier service at a later time. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>definition_type</code> <code>int</code> <p>1 byte parameter to mention definition type. check UDS ISO document for values.</p> required <code>supporting_params</code> <code>list[list[int]] | int</code> <p>check UDS ISO document for different possible values.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.ecu_reset","title":"<code>ecu_reset(reset_type)</code>","text":"<p>The ECUReset service is used by the client to request a server reset. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>reset_type</code> <code>int</code> <p>1 byte parameter is used by the service to describe how the server has to perform the reset.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.input_output_control_by_identifier","title":"<code>input_output_control_by_identifier(data_identifier, control_option_record, control_enable_mask_record=None)</code>","text":"<p>service is used by the client to substitute a value for an input signal, internal server function and/or force control to a value for an output (actuator) of an electronic system. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_identifier</code> <code>int</code> <p>parameter identifies an server local input signal(s), internal parameter(s) and/or output signal(s).</p> required <code>control_option_record</code> <code>list[int]</code> <p>one or multiple bytes (inputOutputControlParameter and controlState 1 to controlState m).</p> required <code>control_enable_mask_record</code> <code>list[int]</code> <p>one or multiple bytes (controlMask 1 to controlMask r). Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.link_control","title":"<code>link_control(link_control_type, link_control_mode_identifier=None, link_record=None)</code>","text":"<p>service is used to control the communication between the client and the server in order to gain bus bandwidth for diagnostic purposes. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>link_control_type</code> <code>int</code> <p>1 byte parameter is used by the service to describe the action to be performed in the server.</p> required <code>link_control_mode_identifier</code> <code>int</code> <p>This conditional 1 byte parameter references a fixed defined mode parameter. Defaults to None.</p> <code>None</code> <code>link_record</code> <code>int</code> <p>This conditional 3 byte parameter record contains a specific mode parameter in case the sub-function parameter indicates that a specific parameter is used. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.read_data_by_identifier","title":"<code>read_data_by_identifier(data_identifier)</code>","text":"<p>service allows the client to request data record values from the server identified by one or more dataIdentifiers. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_identifier</code> <code>list[int]</code> <p>parameter identifies the server data record(s) that are being requested by the client.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.read_data_by_periodic_identifier","title":"<code>read_data_by_periodic_identifier(transmission_mode, periodic_data_identifier)</code>","text":"<p>service allows the client to request the periodic transmission of data record values from the server identified by one or more periodicDataIdentifiers. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>transmission_mode</code> <code>int</code> <p>1 byte parameter identifies the transmission rate of the requested periodicDataIdentifiers to be used by the server.</p> required <code>periodic_data_identifier</code> <code>list[int]</code> <p>parameter identifies the server data record(s) that are being requested by the client.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.read_dtc_information","title":"<code>read_dtc_information(report_type, remaining_arguments_list)</code>","text":"<p>service allows a client to read the status of server resident Diagnostic Trouble Code (DTC) information from any server, or group of servers within a vehicle. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>report_type</code> <code>int</code> <p>type of DTC's that we need to retrieve from ECU.</p> required <code>remaining_arguments_list</code> <code>list[int]</code> <p>list of remaining arguments needed for type of DTC's to be fetched.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.read_memory_by_address","title":"<code>read_memory_by_address(address_and_length_format_identifier, memory_address, memory_size)</code>","text":"<p>service allows the client to request memory data from the server via provided starting address and size of memory to be read. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>address_and_length_format_identifier</code> <code>int</code> <p>parameter is a one byte value with each nibble encoded separately. bit 7 - 4: Length (number of bytes) of the memorySize parameter. bit 3 - 0: Length (number of bytes) of the memoryAddress parameter.</p> required <code>memory_address</code> <code>int</code> <p>parameter is the starting address of server memory from which data is to be retrieved.</p> required <code>memory_size</code> <code>int</code> <p>parameter in the service specifies the number of bytes to be read starting at the address specified by memoryAddress in the server's memory.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.read_scaling_data_by_identifier","title":"<code>read_scaling_data_by_identifier(data_identifier)</code>","text":"<p>service allows the client to request scaling data record information from the server identified by a dataIdentifier. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_identifier</code> <code>int</code> <p>2 byte parameter identifies the server data record that is being requested by the client.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.request_download","title":"<code>request_download(data_format_identifier, address_and_length_format_identifier, memory_address, memory_size)</code>","text":"<p>service is used by the client to initiate a data transfer from the client to the server. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_format_identifier</code> <code>int</code> <p>one byte value with each nibble encoded separately. The high nibble specifies the \"compressionMethod\", and the low nibble specifies the \"encryptingMethod\".</p> required <code>address_and_length_format_identifier</code> <code>int</code> <p>parameter is a one byte value with each nibble encoded separately. bit 7 - 4: Length of the memorySize parameter. bit 3 - 0: Length of the memoryAddress parameter.</p> required <code>memory_address</code> <code>int</code> <p>starting address of the server memory where the data is to be written to.</p> required <code>memory_size</code> <code>int</code> <p>parameter shall be used by the server to compare the memory size with the total amount of data transferred during the TransferData service.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.request_file_transfer","title":"<code>request_file_transfer(mode_of_operation, file_path_and_name_length, file_path_and_name, data_format_identifier=None, file_size_parameter_length=None, file_size_uncompressed=None, file_size_compressed=None)</code>","text":"<p>service is used by the client to initiate a file data transfer from either the client to the server or from the server to the client (download or upload). Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>mode_of_operation</code> <code>int</code> <p>This data-parameter defines the type of operation to be applied to the file or directory indicated in the filePathAndName parameter.</p> required <code>file_path_and_name_length</code> <code>int</code> <p>length in byte for the parameter filePath.</p> required <code>file_path_and_name</code> <code>list[int]</code> <p>Defines the file system location of the server where the file which shall be added, deleted, replaced or read from depending on the parameter modeOfOperation parameter.</p> required <code>data_format_identifier</code> <code>int</code> <p>This data-parameter is a one byte value with each nibble encoded separately.. Defaults to None.</p> <code>None</code> <code>file_size_parameter_length</code> <code>int</code> <p>Defines the length in bytes for both parameters fileSizeUncompressed and fileSizeCompressed. Defaults to None.</p> <code>None</code> <code>file_size_uncompressed</code> <code>list[int]</code> <p>Defines the size of the uncompressed file in bytes. Defaults to None.</p> <code>None</code> <code>file_size_compressed</code> <code>list[int]</code> <p>Defines the size of the compressed file in bytes. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.request_transfer_exit","title":"<code>request_transfer_exit(transfer_request_parameter_record=None)</code>","text":"<p>service is used by the client to terminate a data transfer between client and server (upload or download). Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>transfer_request_parameter_record</code> <code>list[int]</code> <p>parameter record contains parameter(s), which are required by the server to support the transfer of data. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.request_upload","title":"<code>request_upload(data_format_identifier, address_and_length_format_identifier, memory_address, memory_size)</code>","text":"<p>service is used by the client to initiate a data transfer from the server to the client. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_format_identifier</code> <code>int</code> <p>one byte value with each nibble encoded separately. The high nibble specifies the \"compressionMethod\", and the low nibble specifies the \"encryptingMethod\".</p> required <code>address_and_length_format_identifier</code> <code>int</code> <p>parameter is a one byte value with each nibble encoded separately. bit 7 - 4: Length of the memorySize parameter. bit 3 - 0: Length of the memoryAddress parameter.</p> required <code>memory_address</code> <code>int</code> <p>starting address of server memory from which data is to be retrieved.</p> required <code>memory_size</code> <code>int</code> <p>parameter shall be used by the server to compare the memory size with the total amount of data transferred during the TransferData service.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.response_on_event","title":"<code>response_on_event(event_type, event_window_time, event_type_record=None, service_to_respond_to_record=None)</code>","text":"<p>service requests a server to start or stop transmission of responses on a specified event. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>event_type</code> <code>int</code> <p>1 byte parameter is used by the service to specify the event to be configured in the server and to control the service set up.</p> required <code>event_window_time</code> <code>int</code> <p>1 byte parameter is used to specify a window for the event logic to be active in the server.</p> required <code>event_type_record</code> <code>list[int]</code> <p>parameter record contains additional parameters for the specified eventType. Defaults to None.</p> <code>None</code> <code>service_to_respond_to_record</code> <code>list[int]</code> <p>parameter record contains the service parameters of the service to be executed in the server each time the specified event defined in the eventTypeRecord occurs. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.routine_control","title":"<code>routine_control(routine_control_type, routine_identifier, routine_control_option_record=None)</code>","text":"<p>service is used by the client to execute a defined sequence of steps and obtain any relevant results. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>routine_control_type</code> <code>int</code> <p>1 byte parameter used by this service to select the control of the routine.</p> required <code>routine_identifier</code> <code>int</code> <p>parameter identifies a server local routine and is out of the range of defined dataIdentifiers.</p> required <code>routine_control_option_record</code> <code>list[int]</code> <p>Routine entry/exit option parameters. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.secured_data_transmission","title":"<code>secured_data_transmission(security_data_request_record)</code>","text":"<p>service to transmit data that is protected against attacks from third parties - which could endanger data security. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>security_data_request_record</code> <code>list[int]</code> <p>parameter contains the data as processed by the Security Sub-Layer.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.security_access","title":"<code>security_access(security_access_type, security_access_data_record=None)</code>","text":"<p>this service provide a means to access data and/or diagnostic services, which have restricted access for security, emissions, or safety reasons. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>security_access_type</code> <code>int</code> <p>1 byte parameter indicates to the server the step in progress for this service, the level of security the client wants to access.</p> required <code>security_access_data_record</code> <code>list[int]</code> <p>parameter is user optional to transmit data to a server when requesting the seed information. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.tester_present","title":"<code>tester_present(zero_sub_functions)</code>","text":"<p>This service is used to indicate to a server (or servers) that a client is still connected to the vehicle and that certain diagnostic services and/or communication that have been previously activated are to remain active. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>zero_sub_functions</code> <code>int</code> <p>1 byte parameter is used to indicate that no sub-function beside the suppressPosRspMsgIndicationBit is supported by this service.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.transfer_data","title":"<code>transfer_data(block_sequence_counter, transfer_request_parameter_record)</code>","text":"<p>service is used by the client to transfer data either from the client to the server (download) or from the server to the client (upload). Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>block_sequence_counter</code> <code>int</code> <p>parameter value starts at 0x01 with the first TransferData request that follows the RequestDownload (0x34) or RequestUpload (0x35) service.</p> required <code>transfer_request_parameter_record</code> <code>list[int]</code> <p>parameter record contains parameter(s) which are required by the server to support the transfer of data. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.write_data_by_identifier","title":"<code>write_data_by_identifier(data_identifier, data_record)</code>","text":"<p>service allows the client to write information into the server at an internal location specified by the provided data identifier. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>data_identifier</code> <code>int</code> <p>2 byte parameter identifies the server data record that the client is requesting to write to.</p> required <code>data_record</code> <code>list[int]</code> <p>parameter provides the data record associated with the dataIdentifier that the client is requesting to write to.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Services.write_memory_by_address","title":"<code>write_memory_by_address(address_and_length_format_identifier, memory_address, memory_size, data_record)</code>","text":"<p>service allows the client to write information into the server at one or more contiguous memory locations. Check ISO 14229 doc for more information about service.</p> <p>Parameters:</p> Name Type Description Default <code>address_and_length_format_identifier</code> <code>int</code> <p>parameter is a one byte value with each nibble encoded separately. check UDS ISO for more info.</p> required <code>memory_address</code> <code>int</code> <p>parameter is the starting address of server memory to which data is to be written.</p> required <code>memory_size</code> <code>int</code> <p>parameter in the service specifies the number of bytes to be written starting at the address specified by memoryAddress in the server's memory.</p> required <code>data_record</code> <code>list[int]</code> <p>parameter provides the data that the client is actually attempting to write into the server memory addresses within the interval.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>complete request in string of bytes with space between each byte.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Sfid","title":"<code>Sfid()</code>","text":"<p>This class holds all service identifier sub-functions name and its value respectively. Check ISO 14229 doc for more information.</p>"},{"location":"packages/py_uds_lib/#py_uds_lib.py_uds_lib.Sid","title":"<code>Sid()</code>","text":"<p>This class holds all service identifiers name and its value respectively. Check ISO 14229 doc for more information.</p>"},{"location":"packages/tenma_ps/","title":"tenma_ps","text":"<p>python package for controlling tenma power supply</p>"},{"location":"packages/tenma_ps/#source-manual","title":"source manual","text":""},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs","title":"<code>TenmaPs(port)</code>","text":"<p>Interface for a Tenma power supply device.</p> <p>This class manages connection to a Tenma power supply, allowing users to retrieve device status and control voltage/current settings.</p> <p>Attributes:</p> Name Type Description <code>VOLTAGE_MULTIPLIER</code> <code>float</code> <p>Multiplier to convert volts to millivolts.</p> <code>CURRENT_MULTIPLIER</code> <code>float</code> <p>Multiplier to convert amps to milliamps.</p> Example <pre><code>from tenma_ps.power_supply import TenmaPs\n\nwith TenmaPs(\"COM4\") as tenma_ps:\n    print(\"Device version:\", tenma_ps.get_version())\n    print(\"Device status:\", tenma_ps.get_status())\n\n    # Set voltage and current on channel 1\n    tenma_ps.set_voltage(channel=1, voltage=5.0)\n    tenma_ps.set_current(channel=1, current=1.0)\n\n    # Read voltage and current from channel 1\n    voltage = tenma_ps.read_voltage(channel=1)\n    current = tenma_ps.read_current(channel=1)\n    print(f\"Channel 1 Voltage: {voltage} V\")\n    print(f\"Channel 1 Current: {current} A\")\n\n    # Turn on and off the power supply\n    tenma_ps.turn_on()\n    print(\"Power supply turned ON.\")\n    tenma_ps.turn_off()\n    print(\"Power supply turned OFF.\")\n</code></pre> <p>Initialize the Tenma power supply interface.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>str</code> <p>The COM port (e.g., \"COM4\") to which the device is connected.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the connection to the device fails.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter the runtime context for the TenmaPs object.</p> <p>Returns:</p> Name Type Description <code>TenmaPs</code> <code>TenmaPs</code> <p>The TenmaPs instance.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"<p>Exit the runtime context and clean up resources.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>Optional[Type[BaseException]]</code> <p>Exception type, if any.</p> required <code>exc_value</code> <code>Optional[BaseException]</code> <p>Exception value, if any.</p> required <code>traceback</code> <code>Optional[object]</code> <p>Traceback object, if any.</p> required"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.close","title":"<code>close()</code>","text":"<p>Close the connection to the Tenma power supply.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.get_status","title":"<code>get_status()</code>","text":"<p>Get the current status of the Tenma power supply.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The status string reported by the device.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.get_version","title":"<code>get_version()</code>","text":"<p>Get the version information of the Tenma power supply.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The version string reported by the device.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.read_current","title":"<code>read_current(channel)</code>","text":"<p>Read the current from a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>The channel number to read from.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The current value in amps.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.read_voltage","title":"<code>read_voltage(channel)</code>","text":"<p>Read the voltage from a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>The channel number to read from.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The voltage value in volts.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.set_current","title":"<code>set_current(channel, current)</code>","text":"<p>Set the current for a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>The channel number to set.</p> required <code>current</code> <code>float</code> <p>The current value in amps.</p> required"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.set_voltage","title":"<code>set_voltage(channel, voltage)</code>","text":"<p>Set the voltage for a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>The channel number to set.</p> required <code>voltage</code> <code>float</code> <p>The voltage value in volts.</p> required"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.turn_off","title":"<code>turn_off()</code>","text":"<p>Power off the Tenma power supply.</p>"},{"location":"packages/tenma_ps/#tenma_ps.power_supply.TenmaPs.turn_on","title":"<code>turn_on()</code>","text":"<p>Power on the Tenma power supply.</p>"}]}